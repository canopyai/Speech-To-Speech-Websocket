"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var file_utils_exports = {};
__export(file_utils_exports, {
  determineFileBuffer: () => determineFileBuffer,
  fetchFileBuffer: () => fetchFileBuffer
});
module.exports = __toCommonJS(file_utils_exports);
async function determineFileBuffer(urlOrBuffer) {
  if (typeof urlOrBuffer === "string") {
    return await fetchFileBuffer(urlOrBuffer);
  } else if (urlOrBuffer instanceof Buffer) {
    return urlOrBuffer;
  }
  return Promise.reject("SMjs error: Invalid file");
}
async function fetchFileBuffer(url) {
  const response = await fetch(url);
  if (response?.ok) {
    return Buffer.from(await response.arrayBuffer());
  } else {
    return Promise.reject(`SMjs error: ${response.statusText}`);
  }
}
//# sourceMappingURL=file-utils.js.map
