import { CreateJobResponse, RetrieveTranscriptResponse, RetrieveJobResponse, DeleteJobResponse, RetrieveJobsResponse, JobConfig, DataFetchConfig } from '../types';
import { ConnectionConfig } from '../config/connection';
import RetrieveJobsFilters from '../types/list-job-filters';
import { BatchFeatureDiscovery } from '../types/batch-feature-discovery';
import { ISO639_1_Language } from '../types/language-code';
export declare class BatchTranscription {
    private config;
    private _apiKey;
    get apiKey(): string | undefined;
    refreshApiKey(): Promise<string>;
    constructor(config: string | ConnectionConfig);
    private refreshOnFail;
    private get;
    private post;
    private delete;
    /**
     * The main method for transcribing audio files. It takes a url or a buffer and returns a promise with a transcript.
     *
     *
     * @param config TranscribeConfig
     * @returns Promise<RetrieveTranscriptResponse>. A promise that resolves to a transcript.
     */
    transcribe({ input, fileName, transcription_config, translation_config, output_config, summarization_config, auto_chapters_config, topic_detection_config, format, }: TranscribeConfig): Promise<RetrieveTranscriptResponse | string>;
    createJob({ input, fileName, transcription_config, translation_config, output_config, summarization_config, auto_chapters_config, topic_detection_config, }: CreateJobConfig): Promise<CreateJobResponse>;
    listJobs(filters?: RetrieveJobsFilters): Promise<RetrieveJobsResponse>;
    getJob(id: string): Promise<RetrieveJobResponse>;
    deleteJob(id: string, force?: boolean): Promise<DeleteJobResponse>;
    getJobResult<F extends TranscriptionFormat>(jobId: string, format: F): Promise<F extends 'json-v2' ? RetrieveTranscriptResponse : string>;
    getDataFile(jobId: string): Promise<unknown>;
    getFeatureDiscovery(): Promise<BatchFeatureDiscovery>;
}
export type TranscriptionFormat = 'json-v2' | 'text' | 'srt';
export type TranscribeConfig = Omit<JobConfig, 'type'> & {
    input: Blob | {
        fetch: DataFetchConfig;
    };
    /**
     * Optional file name when passing a raw Blob.
     * Note that when passing a `File` object, this is not necessary, as the File's name will be used.
     */
    fileName?: string;
    language?: ISO639_1_Language;
    format?: TranscriptionFormat;
};
export type CreateJobConfig = Omit<JobConfig, 'type'> & {
    input: Blob | DataFetchConfig;
    /**
     * Optional file name when passing a raw Blob.
     * Note that when passing a `File` object, this is not necessary, as the File's name will be used.
     */
    fileName?: string;
};
