{
  "version": 3,
  "sources": ["../../src/batch/client.ts"],
  "sourcesContent": ["import {\n  CreateJobResponse,\n  RetrieveTranscriptResponse,\n  RetrieveJobResponse,\n  DeleteJobResponse,\n  RetrieveJobsResponse,\n  JobConfig,\n  DataFetchConfig,\n} from '../types';\nimport { ConnectionConfig, ConnectionConfigFull } from '../config/connection';\nimport { QueryParams, request, SM_APP_PARAM_NAME } from '../utils/request';\nimport poll from '../utils/poll';\nimport RetrieveJobsFilters from '../types/list-job-filters';\nimport { BatchFeatureDiscovery } from '../types/batch-feature-discovery';\nimport { ISO639_1_Language } from '../types/language-code';\n\nexport class BatchTranscription {\n  private config: ConnectionConfigFull;\n  private _apiKey: string | undefined = undefined;\n\n  get apiKey(): string | undefined {\n    return (\n      this._apiKey ??\n      (typeof this.config.apiKey === 'string' ? this.config.apiKey : undefined)\n    );\n  }\n\n  async refreshApiKey(): Promise<string> {\n    if (typeof this.config.apiKey === 'string') return this.config.apiKey;\n\n    const newKey = await this.config.apiKey();\n    this._apiKey = newKey;\n    return newKey;\n  }\n\n  constructor(config: string | ConnectionConfig) {\n    this.config = new ConnectionConfigFull(config);\n  }\n\n  private async refreshOnFail<T>(\n    doRequest: (key: string) => Promise<T>,\n  ): Promise<T> {\n    try {\n      return await doRequest(this.apiKey ?? (await this.refreshApiKey()));\n    } catch (e) {\n      console.info('Retrying due to error:', e);\n      return await doRequest(await this.refreshApiKey());\n    }\n  }\n\n  private async get<T, K extends string>(\n    endpoint: string,\n    contentType?: string,\n    queryParams?: QueryParams<K>,\n  ): Promise<T> {\n    return await this.refreshOnFail((key: string) =>\n      request(\n        key,\n        this.config.batchUrl,\n        endpoint,\n        'GET',\n        null,\n        { ...queryParams, [SM_APP_PARAM_NAME]: this.config.appId },\n        contentType,\n      ),\n    );\n  }\n\n  private async post<T>(\n    endpoint: string,\n    body: FormData | null = null,\n    contentType?: string,\n  ): Promise<T> {\n    return await this.refreshOnFail((key: string) =>\n      request(\n        key,\n        this.config.batchUrl,\n        endpoint,\n        'POST',\n        body,\n        { [SM_APP_PARAM_NAME]: this.config.appId },\n        contentType,\n      ),\n    );\n  }\n\n  private async delete<T, K extends string = string>(\n    endpoint: string,\n    params?: QueryParams<K>,\n  ): Promise<T> {\n    return this.refreshOnFail((key: string) =>\n      request(key, this.config.batchUrl, endpoint, 'DELETE', null, {\n        ...params,\n        [SM_APP_PARAM_NAME]: this.config.appId,\n      }),\n    );\n  }\n\n  /**\n   * The main method for transcribing audio files. It takes a url or a buffer and returns a promise with a transcript.\n   *\n   *\n   * @param config TranscribeConfig\n   * @returns Promise<RetrieveTranscriptResponse>. A promise that resolves to a transcript.\n   */\n  async transcribe({\n    input,\n    fileName,\n    transcription_config,\n    translation_config,\n    output_config,\n    summarization_config,\n    auto_chapters_config,\n    topic_detection_config,\n    format = 'json-v2',\n  }: TranscribeConfig): Promise<RetrieveTranscriptResponse | string> {\n    if (this.config.apiKey === undefined)\n      throw new Error('Error: apiKey is undefined');\n\n    const fileOrFetchConfig = 'fetch' in input ? input.fetch : input;\n\n    const submitResponse = await this.createJob({\n      input: fileOrFetchConfig,\n      fileName,\n      transcription_config,\n      translation_config,\n      output_config,\n      summarization_config,\n      auto_chapters_config,\n      topic_detection_config,\n    });\n\n    if (submitResponse === null || submitResponse === undefined) {\n      throw 'Error: submitResponse is undefined';\n    }\n\n    await poll(\n      async () => {\n        const { job } = await this.getJob(submitResponse.id);\n        if (job.status === 'rejected') {\n          throw job.errors;\n        } else if (job.status === 'done') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      3000, // repeat every 3 seconds\n      15 * 60 * 1000, // 15 minutes timeout\n    );\n\n    return await this.getJobResult(submitResponse.id, format);\n  }\n\n  async createJob({\n    input,\n    fileName,\n    transcription_config,\n    translation_config,\n    output_config,\n    summarization_config,\n    auto_chapters_config,\n    topic_detection_config,\n  }: CreateJobConfig): Promise<CreateJobResponse> {\n    if (this.config.apiKey === undefined)\n      throw new Error('Error: apiKey is undefined');\n\n    const config: JobConfig = {\n      type: 'transcription',\n      transcription_config,\n      translation_config,\n      output_config,\n      summarization_config,\n      auto_chapters_config,\n      topic_detection_config,\n    };\n\n    const formData = new FormData();\n    if ('url' in input) {\n      config.fetch_data = input;\n    } else {\n      formData.append('data_file', input, fileName);\n    }\n    formData.append('config', JSON.stringify(config));\n\n    return this.post('/v2/jobs', formData);\n  }\n\n  async listJobs(\n    filters: RetrieveJobsFilters = {},\n  ): Promise<RetrieveJobsResponse> {\n    return this.get('/v2/jobs', 'application/json', filters);\n  }\n\n  async getJob(id: string): Promise<RetrieveJobResponse> {\n    return this.get(`/v2/jobs/${id}`, 'application/json');\n  }\n\n  async deleteJob(id: string, force = false): Promise<DeleteJobResponse> {\n    const params = force ? { force } : undefined;\n    return this.delete(`/v2/jobs/${id}`, params);\n  }\n\n  async getJobResult<F extends TranscriptionFormat>(\n    jobId: string,\n    format: F,\n  ): Promise<F extends 'json-v2' ? RetrieveTranscriptResponse : string> {\n    const params = { format: format === 'text' ? 'txt' : format };\n    const contentType =\n      format === 'json-v2' ? 'application/json' : 'text/plain';\n    return this.get(`/v2/jobs/${jobId}/transcript`, contentType, params);\n  }\n\n  async getDataFile(jobId: string) {\n    return this.get(`/v2/jobs/${jobId}/data`, 'application/json');\n  }\n\n  async getFeatureDiscovery(): Promise<BatchFeatureDiscovery> {\n    return this.get('/v1/discovery/features');\n  }\n}\n\nexport type TranscriptionFormat = 'json-v2' | 'text' | 'srt';\n\nexport type TranscribeConfig = Omit<JobConfig, 'type'> & {\n  input: Blob | { fetch: DataFetchConfig };\n  /**\n   * Optional file name when passing a raw Blob.\n   * Note that when passing a `File` object, this is not necessary, as the File's name will be used.\n   */\n  fileName?: string;\n  language?: ISO639_1_Language;\n  format?: TranscriptionFormat;\n};\n\nexport type CreateJobConfig = Omit<JobConfig, 'type'> & {\n  input: Blob | DataFetchConfig;\n  /**\n   * Optional file name when passing a raw Blob.\n   * Note that when passing a `File` object, this is not necessary, as the File's name will be used.\n   */\n  fileName?: string;\n};\n"],
  "mappings": "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",
  "names": ["poll"]
}
